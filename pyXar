#!/usr/bin/python
import sys
import os
import logging
import logging.config
import optparse
import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True
from python import Testboard
from python import DUT
from python import DacDac, Calibrate, Threshold, Trim, TrimBits, Pretest, BondMap, SCurves, PHCalibration, PHMap, PHScan, MaskTest, CurrentScan
from python import HRMap
from python import BetterConfigParser
from gui import PxarGui
from python import PyCmd
from python import ColorFormatter
__version__ = "pyXar: 0.2"

class Pyxar(PyCmd):

    def __init__(self, a_workdir):
        super(Pyxar, self).__init__()
        logging.ColorFormatter = ColorFormatter
        logging.config.fileConfig('config/logging.conf')
        self.directory = a_workdir
        self.logger = logging.getLogger(self.__class__.__name__)
        self.window = None
        self.api = False
    
    def do_init(self, line):
        configs = ['config/general','%s/module' %(self.directory),'%s/tb' %(self.directory),'%s/test.cfg' %(self.directory)]
        self.config = BetterConfigParser()
        self.config.read(configs)
        self.config.set('General', 'work_dir', self.directory)
        self.dut = DUT(self.config)
        self.dut.activate_pixel(0,5,5)
        if self.api:
            from python import api
            self.tb = api.api(self.config.get('Testboard','id'), "WARNING")
            self.tb.startup(self.config, self.dut)
        else:
            self.tb = Testboard(self.config, self.dut)
        self.logger.info('Initialzed DTB.')
        self.tb.ia()
        self.tb.id()

    def do_gui(self, line):
        if self.window:
            return
        self.window = PxarGui( ROOT.gClient.GetRoot(), 800, 800 )

    def help_gui(self):
        print 'open result browser'

    @staticmethod
    def str_to_class(str):
        return reduce(getattr, str.split("."), sys.modules[__name__])
    
    def run_test(self, line):
        a_test = globals()[line](self.tb, self.config, self.window)
        a_test.go(self.config)
        if self.window:
            self.window.histos.extend(a_test.histos)
            self.window.update()

    def get_help(self, line):
        text = '\x1b[1m\x1b[4m\n'
        text += line
        text += ':\x1b[0m\n'
        text += str(globals()[line].__doc__)
        text += '\n\x1b[34m'
        if self.config.has_section(line):
            text += '\n    \x1b[4mSettings:\n\x1b[24m'
            for k, v in dict(self.config.items(line)).items():
                text += '    %-25s%s\n' %(k, v)
                #text += '\t%s:\t%s\n' %(k, v)
        text += '\x1b[0m'
        return text
    
if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option("-d", "--dir", dest="work_dir", default='data',
                  help="Folder with DUT/DTB settings.", metavar="DIR")
    parser.add_option("-n", "--nogui", dest="gui", default=True, action="store_false",
                  help="Run without gui.")
    parser.add_option("-a", "--api", dest="api", default=False, action="store_true",
                  help="Use api as underlying core.")
    (options, args) = parser.parse_args()
    a_workdir = os.path.abspath(options.work_dir)
    pyxar = Pyxar(a_workdir)
    pyxar.logger.info('using working dir %s'%a_workdir)
    pyxar.api = options.api
    if options.gui:
        pyxar.window = PxarGui( ROOT.gClient.GetRoot(), 800, 800 )
    #TODO remove
    pyxar.do_init('')
    try:
        __version__ = open('config/logo').read()
    except:
        pass
    pyxar.cmdloop(__version__)
